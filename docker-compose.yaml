# docker-compose.yaml
services:
  postgres_db:
    container_name: postgres_db
    build:
      context: . # El contexto es la raíz del proyecto
      dockerfile: ./infrastructure/docker/postgres.Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  scraper:
    container_name: scraper
    build:
      context: .
      dockerfile: ./docker/scraper/Dockerfile.dev
    env_file:
      - .env
    volumes:
      - ./scraper:/usr/src/app # Montamos el código del scraper para desarrollo
      - ./database:/usr/src/app/database # Montamos la carpeta database para Alembic
    depends_on:
      postgres_db:
        condition: service_healthy
    restart: unless-stopped

  api:
    container_name: api
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile.dev
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/app
    volumes:
      - ./api:/usr/src/app # Montamos el código de la API para desarrollo
      - ./database:/usr/src/app/database # Montamos la carpeta database para Alembic
    ports:
      - "8000:8000" # Exponemos el puerto 8000 para la API
    depends_on:
      postgres_db:
        condition: service_healthy # Esperamos a que la base de datos esté lista
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_logs:
